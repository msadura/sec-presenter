{"version":3,"sources":["logo.svg","presenter/PresenterScreen.js","constants.js","manage/ManageRiders.js","manage/utils/getDefaultRiders.js","Main.js","manage/utils/getSelectedFieldsArray.js","themes/mainTheme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PresentItem","styled","ListItem","_templateObject","PresentBadge","div","_templateObject2","FullScreenContainer","_templateObject3","props","isFull","PresenterScreen","state","renderField","rider","index","react_default","a","createElement","key","name","_this2","this","_this$props","fields","isPresenterMode","Button","onClick","setState","dist_default","enabled","onChange","List","map","field","Component","RIDERS_COUNT","ManageRiders","_ref","editingIndex","onSetRider","_useState","useState","Array","fill","item","concat","riders","Object","slicedToArray","fullWidth","renderRider","App","_useState2","editRiderNumber","setEditRiderNumber","_useState3","_useState4","isPresenterOpen","setIsPresenterOpen","_useState5","_useState6","setFields","className","react_new_window_default","onUnload","PresenterScreen_PresenterScreen","Grid","container","xs","md","_fields","toConsumableArray","theme","brand","successColor","lightTextColor","backgroundColor","breakBg","clockedInBg","clockInBg","avatarBorderColor","avatarDefaultBg","lightBg","regularTextColor","labelTextColor","contentTextColor","errorTextColor","separatorColor","btnBrand","btnBrandClicked","btnBrandHover","btnGreenTextColor","btnBreakTextColor","appScreenState","initializing","clockedIn","onBreak","clockedOut","endBreak","nothingToDo","chooseShift","toast","success","error","button","bg","bgClicked","bgHover","text","textClicked","grey","styled_components_browser_esm","mainTheme","Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f717ae2c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItem from '@material-ui/core/ListItem';\nimport styled from 'styled-components';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport Fullscreen from \"react-full-screen\";\nimport Grid from '@material-ui/core/Grid';\n\nconst PresentItem = styled(ListItem)`\n  padding-top: 4px !important;\n  padding-bottom: 4px !important;\n`;\n\nconst PresentBadge = styled.div`\n  font-weight: bold;\n  margin-right: 10px;\n`;\n\nconst FullScreenContainer = styled.div`\n  background-color: white;\n  min-height: ${props => props.isFull ? '100vh' : 0};\n`;\n\n\nexport default class PresenterScreen extends Component {\n  state = {\n    isFull: false\n  };\n\n  renderField = (rider, index) => {\n    return (\n      <PresentItem key={index}>\n        <PresentBadge>{index + 1}.</PresentBadge>\n        {rider && rider.name}\n      </PresentItem>\n    );\n  }\n  \n  render() {\n    const { fields, isPresenterMode } = this.props;\n    return (\n      <div>\n        {isPresenterMode && <Button onClick={() => this.setState({ isFull: true })}>Full Screen</Button>}\n\n        <Fullscreen\n          enabled={this.state.isFull}\n          onChange={isFull => this.setState({ isFull })}\n        >\n          <FullScreenContainer isFull={isPresenterMode}>\n            <p>Selected riders:</p>\n            <List>\n              {fields.map((field, index) => this.renderField(field, index))}\n            </List>\n          </FullScreenContainer>\n\n        </Fullscreen>\n      </div>\n    );\n  }\n\n}","export const RIDERS_COUNT = 18;","import React, { useState } from 'react';\nimport List from '@material-ui/core/List';\nimport Button from '@material-ui/core/Button';\n\nimport getDefaultRiders from './utils/getDefaultRiders';\nimport { RIDERS_COUNT } from '../constants';\n\n\nexport default function ManageRiders({ editingIndex, onSetRider }) {\n  const [riders] = useState(getDefaultRiders(RIDERS_COUNT));\n\n  const renderRider = (rider, index) => {\n    return (\n      <Button key={index} fullWidth onClick={() => onSetRider(rider)}>\n        {rider.name}\n      </Button>\n    );\n  }\n\n  if (!riders) {\n    return null;\n  }\n\n  return (\n    <div>\n      <p>Selecting rider for number: {editingIndex + 1}</p>\n      <List>\n        {riders.map((rider, index) => renderRider(rider, index))}\n      </List>\n    </div>\n  );\n}","export default function getDefaultRiders(count) {\n  return new Array(count).fill('').map((item, index) => ({ name: `Rider ${index + 1}` }))\n}","import React,  { useState, useEffect } from 'react';\nimport Fullscreen from \"react-full-screen\";\nimport Grid from '@material-ui/core/Grid';\nimport NewWindow from 'react-new-window';\nimport Button from '@material-ui/core/Button';\n\nimport './App.css';\nimport PresenterScreen from './presenter/PresenterScreen';\nimport ManageRiders from './manage/ManageRiders';\nimport getSelectedFieldsArray from './manage/utils/getSelectedFieldsArray';\nimport { RIDERS_COUNT } from './constants';\n\nfunction App() {\n  const [editRiderNumber, setEditRiderNumber] = useState(0);\n  const [isPresenterOpen, setIsPresenterOpen] = useState(false);\n  const [fields, setFields] = useState(getSelectedFieldsArray(RIDERS_COUNT));\n\n  const setFieldRider = (rider) => {\n    const _fields = [...fields];\n    _fields[editRiderNumber] = rider;\n    setFields(_fields);\n    setEditRiderNumber(editRiderNumber + 1);\n  }\n\n  const renderPresenter = () => {\n    if (!isPresenterOpen) {\n      return null;\n    }\n\n    return (\n      <NewWindow onUnload={() => setIsPresenterOpen(false)} >\n        <PresenterScreen fields={fields} isPresenterMode />\n      </NewWindow>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n        <Button onClick={() => setIsPresenterOpen(!isPresenterOpen) }>\n        {isPresenterOpen ? 'Close Presenter' :  'Open Presenter'}\n        </Button>\n        {renderPresenter()}\n\n      <Grid container>\n        <Grid item xs={12} md={6}>\n          <PresenterScreen fields={fields} />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <ManageRiders editingIndex={editRiderNumber} onSetRider={setFieldRider} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","export default function getSelectedFieldsArray(count) {\n  return new Array(count).fill(null);\n}","// @flow\n\nimport type { Theme } from '../common/typings';\n\nconst brand = '#0085FF';\nconst successColor = '#1CC982';\n\nconst whiteText = '#FFFFFF';\nconst lightTextColor = '#787878';\nconst regularTextColor = '#646464';\nconst labelTextColor = '#4C6379';\nconst contentTextColor = '#738190';\nconst btnGreenTextColor = successColor;\nconst btnBreakTextColor = '#FDB34D';\nconst errorTextColor = '#FB6370';\nconst btnOnBreakBg = '#e2ac4f';\nconst btnClockedOutBg = '#687482';\nconst backgroundColor = '#EEEEEE';\nconst btnBrand = '#0078e6';\nconst btnBrandClicked = '#FFFFFF';\nconst btnBrandHover = 'rgba(0, 0, 0, 0.06)';\nconst btnBackgroundClicked = 'rgba(0, 0, 0, 0.12)';\nconst btnBackgroundHover = 'rgba(0, 0, 0, 0.06)';\nconst btnFormBackgroundClicked = 'rgba(0, 0, 0, 0.1)';\nconst toastErrorBg = '#4C6379';\nconst breakBg = '#FBBF58';\nconst clockedInBg = successColor;\nconst clockInBg = '#FFFFFF';\nconst clockedOutBg = '#738190';\nconst lightBg = '#f8f8f8';\nconst avatarBorderColor = '#A0AFBE';\nconst avatarDefaultBg = '#9CA6B0';\nconst separatorColor = '#E9EBED';\nconst grayActionButton = 'rgba(55, 85, 106, 0.1)';\nconst successActionButton = '#19b575';\n\nconst appScreenState = {\n  initializing: backgroundColor,\n  //main: brand, // @TODO: check if this is needed anywhere\n  clockedIn: clockedInBg,\n  onBreak: breakBg,\n  clockedOut: clockedOutBg,\n  endBreak: clockedInBg,\n  nothingToDo: clockedOutBg,\n  chooseShift: brand\n};\n\nconst toast = {\n  success: brand,\n  error: toastErrorBg\n};\n\nconst button = {\n  brand: {\n    bg: btnBrand,\n    bgClicked: btnBrandClicked,\n    bgHover: btnBrandHover,\n    text: whiteText,\n    textClicked: brand\n  },\n  grey: {\n    bg: grayActionButton,\n    bgClicked: btnFormBackgroundClicked,\n    bgHover: btnFormBackgroundClicked,\n    text: contentTextColor,\n    textClicked: contentTextColor\n  },\n  clockedIn: {\n    bg: successActionButton,\n    bgClicked: btnBackgroundClicked,\n    bgHover: btnBackgroundHover,\n    text: whiteText,\n    textClicked: whiteText\n  },\n  onBreak: {\n    bg: btnOnBreakBg,\n    bgClicked: btnBackgroundClicked,\n    bgHover: btnBackgroundHover,\n    text: whiteText,\n    textClicked: whiteText\n  },\n  endBreak: {\n    bg: successActionButton,\n    bgClicked: btnBackgroundClicked,\n    bgHover: btnBackgroundHover,\n    text: whiteText,\n    textClicked: whiteText\n  },\n  clockedOut: {\n    bg: btnClockedOutBg,\n    bgClicked: btnBackgroundClicked,\n    bgHover: btnBackgroundHover,\n    text: whiteText,\n    textClicked: whiteText\n  }\n};\n\nconst theme: Theme = {\n  brand,\n  successColor,\n\n  lightTextColor,\n  backgroundColor,\n  breakBg,\n  clockedInBg,\n  clockInBg,\n  avatarBorderColor,\n  avatarDefaultBg,\n  lightBg,\n  regularTextColor,\n  labelTextColor,\n  contentTextColor,\n  errorTextColor,\n  separatorColor,\n  btnBrand,\n  btnBrandClicked,\n  btnBrandHover,\n  btnGreenTextColor,\n  btnBreakTextColor,\n\n  appScreenState,\n  toast,\n  button\n};\n\nexport default theme;","import React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './Main';\nimport mainTheme from './themes/mainTheme';\n\nfunction App() {\n  return (\n    <ThemeProvider theme={mainTheme}>\n      <Main />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}